var NanoUtility=function(){var a={};return{init:function(){var e=$("body");a=e.data("urlParameters")},generateHref:function(e){var t="?";for(var n in a)a.hasOwnProperty(n)&&("?"!==t&&(t+=";"),t+=n+"="+a[n]);for(var n in e)e.hasOwnProperty(n)&&("?"!==t&&(t+=";"),t+=n+"="+e[n]);return t},winset:function(e,t,n){var a,r;return null==n&&(n=NanoStateManager.getData().config.window.ref),(a={})[n+"."+e]=t,r=a,location.href=NanoUtility.href("winset",r)},extend:function(n,a){return Object.keys(a).forEach(function(e){var t;return(t=a[e])&&"[object Object]"===Object.prototype.toString.call(t)?(n[e]=n[e]||{},NanoUtility.extend(n[e],t)):n[e]=t}),n},href:function(e,t){return null==e&&(e=""),null==t&&(t={}),e=new Url("byond://"+e),NanoUtility.extend(e.query,t),e},close:function(){var e;return e={command:"nanoclose "+a.src},this.winset("is-visible","false"),location.href=NanoUtility.href("winset",e)}}}();"undefined"==typeof jQuery&&reportError("ERROR: Javascript library failed to load!"),"undefined"==typeof doT&&reportError("ERROR: Template engine failed to load!");var reportError=function(e){window.location="byond://?nano_err="+encodeURIComponent(e),alert(e)};$(document).ready(function(){NanoUtility.init(),NanoStateManager.init(),NanoTemplate.init(),NanoWindow.init()}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){var t=this.length,n=Number(arguments[1])||0;for((n=n<0?Math.ceil(n):Math.floor(n))<0&&(n+=t);n<t;n++)if(n in this&&this[n]===e)return n;return-1}),String.prototype.format||(String.prototype.format=function(n){return this.replace(String.prototype.format.regex,function(e){var t=parseInt(e.substring(1,e.length-1));return 0<=t?n[t]:-1===t?"{":-2===t?"}":""})},String.prototype.format.regex=new RegExp("{-?[0-9]+}","g")),Object.size=function(e){var t=0;for(var n in e)e.hasOwnProperty(n)&&t++;return t},window.console||(window.console={log:function(e){return!1}}),String.prototype.toTitleCase=function(){var r=/^(a|an|and|as|at|but|by|en|for|if|in|of|on|or|the|to|vs?\.?|via)$/i;return this.replace(/([^\W_]+[^\s-]*) */g,function(e,t,n,a){return 0<n&&n+t.length!==a.length&&-1<t.search(r)&&":"!==a.charAt(n-2)&&a.charAt(n-1).search(/[^\s-]/)<0?e.toLowerCase():-1<t.substr(1).search(/[A-Z]|\../)?e:e.charAt(0).toUpperCase()+e.substr(1)})},$.ajaxSetup({cache:!1}),Function.prototype.inheritsFrom=function(e){return this.prototype=new e,(this.prototype.constructor=this).prototype.parent=e.prototype,this},String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),String.prototype.ckey||(String.prototype.ckey=function(){return this.replace(/\W/g,"").toLowerCase()}),NanoStateManager=function(){function t(e,t){for(var n in e)e.hasOwnProperty(n)&&jQuery.isFunction(e[n])&&(t=e[n].call(this,t));return t}var n=!1,a=null,r={},o={},i={},s=null,l=function(e){null!=s&&(!1!==(e=s.onBeforeUpdate(e))?(a=e,s.onUpdate(a),s.onAfterUpdate(a)):reportError("data is false, return"))};return{init:function(){!function(){null!=(a=$("body").data("initialData"))&&a.hasOwnProperty("config")&&a.hasOwnProperty("data")||reportError("Error: Initial data did not load correctly."+JSON.stringify(a));var e="default";a.config.hasOwnProperty("stateKey")&&a.config.stateKey&&(e=a.config.stateKey.toLowerCase()),NanoStateManager.setCurrentState(e),$(document).on("templatesLoaded",function(){l(a),n=!0})}()},receiveUpdateData:function(e){!function(e){var t;try{t=jQuery.parseJSON(e)}catch(e){return reportError("recieveUpdateData failed. <br>Error name: "+e.name+"<br>Error Message: "+e.message)}t.hasOwnProperty("data")||(a&&a.hasOwnProperty("data")?t.data=a.data:t.data={}),n?l(t):a=t}(e)},addBeforeUpdateCallback:function(e,t){r[e]=t},addBeforeUpdateCallbacks:function(e){for(var t in e)e.hasOwnProperty(t)&&NanoStateManager.addBeforeUpdateCallback(t,e[t])},removeBeforeUpdateCallback:function(e){r.hasOwnProperty(e)&&delete r[e]},executeBeforeUpdateCallbacks:function(e){return t(r,e)},addAfterUpdateCallback:function(e,t){o[e]=t},addAfterUpdateCallbacks:function(e){for(var t in e)e.hasOwnProperty(t)&&NanoStateManager.addAfterUpdateCallback(t,e[t])},removeAfterUpdateCallback:function(e){o.hasOwnProperty(e)&&delete o[e]},executeAfterUpdateCallbacks:function(e){return t(o,e)},addState:function(e){e instanceof NanoStateClass?e.key?i[e.key]=e:reportError("ERROR: Attempted to add a state with an invalid stateKey"):reportError("ERROR: Attempted to add a state which is not instanceof NanoStateClass")},setCurrentState:function(e){if(void 0===e||!e)return reportError("ERROR: No state key was passed!"),!1;if(!i.hasOwnProperty(e))return reportError("ERROR: Attempted to set a current state which does not exist: "+e),!1;var t=s;return s=i[e],null!=t&&t.onRemove(s),s.onAdd(t),!0},getCurrentState:function(){return s},getData:function(){return a}}}(),NanoBaseCallbacks=function(){var a=!0,t={},n={status:function(n){var e;return 2==n.config.status?(e="good",$(".linkActive").removeClass("inactive")):(e=1==n.config.status?"average":"bad",$(".linkActive").addClass("inactive")),$(".statusicon").removeClass("good bad average").addClass(e),$(".linkActive").stopTime("linkPending"),$(".linkActive").removeClass("linkPending"),$(".linkActive").off("click").on("click",function(e){e.preventDefault();var t=$(this).data("href");null!=t&&a&&(a=!1,$("body").oneTime(300,"enableClick",function(){a=!0}),2==n.config.status&&$(this).oneTime(300,"linkPending",function(){$(this).addClass("linkPending")}),window.location.href=t)}),n},nanomap:function(e){return $(".mapIcon").off("mouseenter mouseleave").on("mouseenter",function(e){$("#uiMapTooltip").html($(this).children(".tooltip").html()).show().stopTime().oneTime(5e3,"hideTooltip",function(){$(this).fadeOut(500)})}),$(".zoomLink").off("click").on("click",function(e){e.preventDefault();var t=$(this).data("zoomLevel"),n=$("#uiMap"),a=n.width()*t,r=n.height()*t;n.css({zoom:t,left:"50%",top:"50%",marginLeft:"-"+Math.floor(a/2)+"px",marginTop:"-"+Math.floor(r/2)+"px"})}),$("#uiMapImage").attr("src",e.config.map+"_nanomap_z"+e.config.mapZLevel+".png"),e}};return{addCallbacks:function(){NanoStateManager.addBeforeUpdateCallbacks(t),NanoStateManager.addAfterUpdateCallbacks(n)},removeCallbacks:function(){for(var e in t)t.hasOwnProperty(e)&&NanoStateManager.removeBeforeUpdateCallback(e);for(var e in n)n.hasOwnProperty(e)&&NanoStateManager.removeAfterUpdateCallback(e)}}}(),NanoBaseHelpers=function(){var t={syndicateMode:function(){return $(".mainBG").css("background","url('syndicate.png') no-repeat fixed center/50% 50%, linear-gradient(to bottom, #8f1414 0%, #4B0A0A 100%) no-repeat fixed center;"),$("#uiTitleFluff").css("background-image","url('uiTitleFluff-Syndicate.png')"),$("#uiTitleFluff").css("background-position","50% 50%"),$("#uiTitleFluff").css("background-repeat","no-repeat"),""},combine:function(e,t){return e&&t?e.concat(t):e||t},dump:function(e){return JSON.stringify(e)},link:function(e,t,n,a,r,o){var i="",s="noIcon";void 0!==t&&t&&(i='<div class="uiLinkPendingIcon"></div><i class="fa fa-fw fa-'+t+'"></i>',s="hasIcon"),void 0!==r&&r||(r="link");var l="";void 0!==o&&o&&(l='id="'+o+'"');var c=NanoTransition.allocID(l+"_"+e.toString().replace(/[^a-z0-9_]/gi,"_")+"_"+t);return void 0!==a&&a?'<div unselectable="on" class="link '+s+" "+c+'" '+l+">"+i+e+'</div><script>$(function() { var newState = {"..class": "'+r+" "+a+'"}; var old = NanoTransition.transitionElement("'+c+'", null, newState, 200); NanoTransition.animateHover("'+c+'", null, old, newState); });<\/script>':'<div unselectable="on" class="linkActive '+s+" "+c+'" data-href="'+NanoUtility.generateHref(n)+'" '+l+">"+i+e+'</div><script>$(function() { var newState = {"..class": "'+r+'"}; var old = NanoTransition.transitionElement("'+c+'", null, newState, 200); NanoTransition.animateHover("'+c+'", null, old, newState); });<\/script>'},xor:function(e,t){return e^t},precisionRound:function(e,t){if(0==t)return Math.round(number);var n=Math.pow(10,t);return Math.round(e*n)/n},round:function(e){return Math.round(e)},fixed:function(e){return Math.round(10*e)/10},floor:function(e){return Math.floor(e)},ceil:function(e){return Math.ceil(e)},string:function(){if(0==arguments.length)return"";if(1==arguments.length)return arguments[0];if(1<arguments.length){stringArgs=[];for(var e=1;e<arguments.length;e++)stringArgs.push(arguments[e]);return arguments[0].format(stringArgs)}return""},formatNumber:function(e){var t=e.toString().split(".");return t[0]=t[0].replace(/\B(?=(\d{3})+(?!\d))/g,","),t.join(".")},capitalizeFirstLetter:function(e){return e.charAt(0).toUpperCase()+e.slice(1)},displayBar:function(e,t,n,a,r){t<n?e<t?e=t:n<e&&(e=n):t<e?e=t:e<n&&(e=n),void 0!==a&&a||(a=""),void 0!==r&&r||(r="");var o=Math.round((e-t)/(n-t)*100),i=NanoTransition.allocID(t+"_"+n);return'<div class="displayBar '+i+" "+a+'"><div class="displayBarFill"></div><div class="displayBarText '+a+'">'+r+'</div></div><script>$(function() { NanoTransition.transitionElement("'+i+'", ".displayBarFill", {width: "'+o+'%", "..class": "'+a+'"}); });<\/script>'},dangerToClass:function(e){return 0==e?"good":1==e?"average":"bad"},dangerToSpan:function(e){return 0==e?'"<span class="good">Good</span>"':1==e?'"<span class="average">Minor Alert</span>"':'"<span class="bad">Major Alert</span>"'},generateHref:function(e){var t=$("body");_urlParameters=t.data("urlParameters");var n="?";for(var a in _urlParameters)_urlParameters.hasOwnProperty(a)&&("?"!==n&&(n+=";"),n+=a+"="+_urlParameters[a]);for(var a in e)e.hasOwnProperty(a)&&("?"!==n&&(n+=";"),n+=a+"="+e[a]);return n},displayDNABlocks:function(e,t,n,a,r){if(!e)return'<div class="notice">Please place a valid subject into the DNA modifier.</div>';var o=e.split(""),i='<div class="dnaBlock"><div class="link dnaBlockNumber">1</div>',s=1,l=1;for(var c in o)if(o.hasOwnProperty(c)&&"object"!=typeof o[c]){var d;d="UI"==r.toUpperCase()?{selectUIBlock:s,selectUISubblock:l}:{selectSEBlock:s,selectSESubblock:l};var u="linkActive";s==t&&l==n&&(u="selected"),i+='<div class="link '+u+' dnaSubBlock" data-href="'+NanoUtility.generateHref(d)+'" id="dnaBlock'+c+'">'+o[c]+"</div>",++c%a==0&&c<o.length?(l=1,i+='</div><div class="dnaBlock"><div class="link dnaBlockNumber">'+ ++s+"</div>"):l++}return i+="</div>"},cMirror:function(e){CodeMirror.fromTextArea(document.getElementById(e),{lineNumbers:!0,indentUnit:4,indentWithTabs:!0,theme:"lesser-dark"})},smoothNumber:function(e){var t=NanoTransition.allocID("n");return'<span class="'+t+'"></span><script>$(function() { var newState = {value: '+e+'}; var old = NanoTransition.updateElement("'+t+'", newState); NanoTransition.animateTextValue("'+t+'", null, -1, old["value"], newState["value"]); });<\/script>'},smoothRound:function(e,t){var n=NanoTransition.allocID(t);return void 0===t&&(placed=0),'<span class="'+n+'"></span><script>$(function() { var newState = {value: '+e.toFixed(t)+'}; var old = NanoTransition.updateElement("'+n+'", newState); NanoTransition.animateTextValue("'+n+'", null, '+t+', old["value"], newState["value"]); });<\/script>'}};return{addHelpers:function(){NanoTemplate.addHelpers(t)},removeHelpers:function(){for(var e in t)t.hasOwnProperty(e)&&NanoTemplate.removeHelper(e)}}}(),NanoStateDefaultClass.inheritsFrom(NanoStateClass);var NanoStateDefault=new NanoStateDefaultClass;function NanoStateDefaultClass(){this.key="default",this.key=this.key.toLowerCase(),NanoStateManager.addState(this)}NanoStatePDAClass.inheritsFrom(NanoStateClass);var NanoStatePDA=new NanoStatePDAClass;function NanoStatePDAClass(){this.key="pda",this.key=this.key.toLowerCase(),this.current_template="",NanoStateManager.addState(this)}function NanoStateClass(){}NanoStatePDAClass.prototype.onUpdate=function(t){NanoStateClass.prototype.onUpdate.call(this,t);var n=this;try{if(null!=t.data.app){var a=t.data.app.template;null!=a&&a!=n.current_template?$.when($.ajax({url:a+".tmpl",cache:!1,dataType:"text"})).done(function(e){e+='<div class="clearBoth"></div>';try{NanoTemplate.addTemplate("app",e),NanoTemplate.resetTemplate("app"),$("#uiApp").html(NanoTemplate.parse("app",t)),n.current_template=a,n.onAfterUpdate(t)}catch(e){return void reportError("ERROR: An error occurred while loading the PDA App UI: "+e.message)}}).fail(function(){reportError("ERROR: Loading template app("+a+") failed!")}):NanoTemplate.templateExists("app")&&$("#uiApp").html(NanoTemplate.parse("app",t))}}catch(e){return void reportError("ERROR: An error occurred while rendering the PDA App UI: "+e.message)}},NanoStateClass.prototype.key=null,NanoStateClass.prototype.layoutRendered=!1,NanoStateClass.prototype.contentRendered=!1,NanoStateClass.prototype.mapInitialised=!1,NanoStateClass.prototype.isCurrent=function(){return NanoStateManager.getCurrentState()==this},NanoStateClass.prototype.onAdd=function(e){NanoBaseCallbacks.addCallbacks(),NanoBaseHelpers.addHelpers()},NanoStateClass.prototype.onRemove=function(e){NanoBaseCallbacks.removeCallbacks(),NanoBaseHelpers.removeHelpers()},NanoStateClass.prototype.onBeforeUpdate=function(e){return e=NanoStateManager.executeBeforeUpdateCallbacks(e)},NanoStateClass.prototype.onUpdate=function(e){try{(!this.layoutRendered||e.config.hasOwnProperty("autoUpdateLayout")&&e.config.autoUpdateLayout)&&($("#uiLayout").html(NanoTemplate.parse("layout",e)),this.layoutRendered=!0),(!this.contentRendered||e.config.hasOwnProperty("autoUpdateContent")&&e.config.autoUpdateContent)&&($("#uiContent").html(NanoTemplate.parse("main",e)),this.contentRendered=!0),NanoTemplate.templateExists("mapContent")&&(this.mapInitialised||($("#uiMap").draggable(),$("#uiMapTooltip").off("click").on("click",function(e){e.preventDefault(),$(this).fadeOut(400)}),this.mapInitialised=!0),$("#uiMapContent").html(NanoTemplate.parse("mapContent",e)),e.config.hasOwnProperty("showMap")&&e.config.showMap?($("#uiContent").addClass("hidden"),$("#uiMapWrapper").removeClass("hidden")):($("#uiMapWrapper").addClass("hidden"),$("#uiContent").removeClass("hidden"))),NanoTemplate.templateExists("mapHeader")&&$("#uiMapHeader").html(NanoTemplate.parse("mapHeader",e)),NanoTemplate.templateExists("mapFooter")&&$("#uiMapFooter").html(NanoTemplate.parse("mapFooter",e))}catch(e){return void reportError("ERROR: An error occurred while rendering the UI: "+e.message)}},NanoStateClass.prototype.onAfterUpdate=function(e){NanoStateManager.executeAfterUpdateCallbacks(e)},NanoStateClass.prototype.alertText=function(e){alert(e)};var NanoTemplate=function(){var n={},a={},r={},o={},i=function(){if(Object.size(n)){for(var t in n)if(n.hasOwnProperty(t))return void $.when($.ajax({url:n[t],cache:!1,dataType:"text"})).done(function(e){e+='<div class="clearBoth"></div>';try{NanoTemplate.addTemplate(t,e)}catch(e){return void reportError("ERROR: An error occurred while loading the UI: "+e.message)}delete n[t],i()}).fail(function(){reportError("ERROR: Loading template "+t+"("+n[t]+") failed!")})}else $(document).trigger("templatesLoaded")};return{init:function(){null==(n=$("body").data("templateData"))&&reportError("Error: Template data did not load correctly."),i()},addTemplate:function(e,t){a[e]=t},templateExists:function(e){return a.hasOwnProperty(e)},resetTemplate:function(e){r[e]=null},parse:function(e,t){if(!r.hasOwnProperty(e)||!r[e]){if(!a.hasOwnProperty(e))return reportError('ERROR: Template "'+e+'" does not exist in _compiledTemplates!'),"<h2>Template error (does not exist)</h2>";!function(){for(var e in a)try{r[e]=doT.template(a[e],null,a)}catch(e){reportError(e.message)}}()}return"function"!=typeof r[e]?(reportError(r[e]),reportError('ERROR: Template "'+e+'" failed to compile!'),"<h2>Template error (failed to compile)</h2>"):r[e].call(this,t.data,t.config,o)},addHelper:function(e,t){jQuery.isFunction(t)?o[e]=t:reportError("NanoTemplate.addHelper failed to add "+e+" as it is not a function.")},addHelpers:function(e){for(var t in e)e.hasOwnProperty(t)&&NanoTemplate.addHelper(t,e[t])},removeHelper:function(e){helpers.hasOwnProperty(e)&&delete o[e]}}}();NanoTransition=function(){var s={},l={},t=0;NanoStateManager.addBeforeUpdateCallback("TransitionReset",function(e){return t=0,e});function i(e,t,n){var a,r=s[e];void 0===n&&(n=!1);var o=$("."+e);if(0==o.length)return t;if(o=o[0],r&&r.tagName==o.tagName&&r.tabIndex==o.tabIndex&&r.parent==o.parentNode.tagName&&r.children==o.children.length){if(a=l[e],n){var i={};for(k in a)i[k]=a[k];for(k in t)i[k]=t[k];t=i}}else a=t,s[e]={tagName:o.tagName,tabIndex:o.tabIndex,parent:o.parentNode.tagName,children:o.children.length};return l[e]=t,a}function d(e,t){var n=$("."+e);return t?$(n).children(t):$(n)}function o(e,t,n,a,r){var o=d(e,t);void 0===r&&(r=1900),o.css(n).animate(a,{duration:r,queue:!1});var i=n["..class"],s=a["..class"];if(i&&s&&(o.addClass(i),i!=s)){i=i.split(" "),s=s.split(" ");var l=i.filter(function(e){return-1==s.indexOf(e)}),c=s.filter(function(e){return-1==i.indexOf(e)});i=l.join(" "),s=c.join(" "),o.switchClass(i,s,{duration:r,queue:!1})}}return{allocID:function(e){return"_Hide_Map_close"==e?"transition__map":(void 0===e&&(e=""),"transition__"+t+++"_"+e.toString())},updateElement:i,animateElement:o,animateTextValue:function(e,t,n,a,r,o){var i=d(e,t);void 0===o&&(o=1900),-1==n?i.text(a.toString()):i.text(a.toFixed(n)),a!=r&&i.animate({i:1},{duration:o,queue:!1,step:function(e,t){t.elem.textContent=-1==n?(a*(1-e)+r*e).toString():(a*(1-e)+r*e).toFixed(n)}})},animateHover:function(e,t,n,a,r){var o=d(e,t);void 0===r&&(r=200),n["..hover"]&&o.addClass("hover"),o.hover(function(){o.stop(1,1).addClass("hover",{duration:r,queue:!1}),i(e,{"..hover":!0},!0)},function(){o.stop(1,1).removeClass("hover",{duration:r,queue:!1}),i(e,{"..hover":!1},!0)})},transitionElement:function(e,t,n,a){var r=i(e,n);return o(e,t,r,n,a),r}}}();var NanoWindow=function(){function u(e,t){NanoUtility.winset("pos",e+","+t)}function p(e,t){NanoUtility.winset("size",e+","+t)}function e(){var e=window.screenLeft,t=window.screenTop;u(0,0),f=window.screenLeft,h=window.screenTop;var n=e-f,a=t-h;u(n=n<f?0:n,a=a<h?0:a);var r=$(window).height(),o=$(window).width();$("body").height()>=$(window).height()-29&&(o+=17),$(document).width()>$(window).width()&&(r+=17);var i=Math.max(280,o),s=Math.max(140,r);p(i,s)}var f,h,a,m,v,y,g,t=function(){NanoUtility.winset("titlebar",0),NanoUtility.winset("can-resize",0),NanoUtility.winset("transparent-color","#FF00E4"),$(".fancy").show(),$("#uiTitleFluff").css("right","72px"),$(".statusicon").css("left","34px"),$("#uiTitleText").css("left","66px")},n=function(){$(".close").on("click",function(e){NanoUtility.close()}),$(".minimize").on("click",function(e){NanoUtility.winset("is-minimized","true")})},r=function(){$("body").on("mousemove","#uiTitleWrapper",function(e){o(e)}),$("body").on("mousedown","#uiTitleWrapper",function(){a=!0,$(this)[0].setCapture&&$(this)[0].setCapture()}),$("body").on("mouseup","#uiTitleWrapper",function(){a=!1,$(this)[0].releaseCapture&&$(this)[0].releaseCapture()}),$("body").on("mousemove","div.resizeArea",function(e){i.call(this,e)}),$("body").on("mousedown","div.resizeArea",function(){y=!0,this.setCapture&&this.setCapture()}),$("body").on("mouseup","div.resizeArea",function(){y=!1,this.releaseCapture&&this.releaseCapture()})},o=function(e){if(e=e||window.event,m!==e.screenX||v!==e.screenY){if(void 0===m&&(m=e.screenX,v=e.clientY),a){var t=e.screenX-m,n=e.screenY-v;t+=window.screenLeft-f,n+=window.screenTop-h,u(t,n)}m=e.screenX,v=e.screenY}},i=function(e){if(!g){if(g=!0,e=e||window.event,void 0===m&&(m=e.screenX-f,v=e.screenY-h),y){var t=$(window).width(),n=$(window).height();$("body").height()>=$(window).height()-29&&(t+=17),$(document).width()>$(window).width()&&(n+=17);var a=Number($(this).attr("rx")),r=Number($(this).attr("ry")),o=e.screenX-f-m,i=e.screenY-h-v,s=window.screenLeft-f,l=window.screenTop-h,c=t+o*a;-1==a&&(s+=o);var d=n+i*r;-1==r&&(l+=i),c=Math.max(280,c),d=Math.max(140,d),u(s,l),p(c,d)}m=e.screenX-f,v=e.screenY-h,g=!1}};return{init:function(){$(document).on("templatesLoaded",function(){e(),NanoStateManager.getData().config.user.fancy&&(t(),e(),n(),r())})}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
