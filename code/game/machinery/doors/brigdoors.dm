#define CHARS_PER_LINE 5
#define FONT_SIZE "5pt"
#define FONT_COLOR "#09f"
#define FONT_STYLE "Arial Black"

///////////////////////////////////////////////////////////////////////////////////////////////
// Brig Door control displays.
//  Description: This is a controls the timer for the brig doors, displays the timer on itself and
//               has a popup window when used, allowing to set the timer.
//  Code Notes: Combination of old brigdoor.dm code from rev4407 and the status_display.dm code
//  Date: 01/September/2010
//  Programmer: Veryinky
/////////////////////////////////////////////////////////////////////////////////////////////////

datum/spacelaw
	var/name = "Law"
	var/max_brig = 0

/obj/machinery/door_timer
	name = "Door Timer"
	icon = 'icons/obj/status_display.dmi'
	icon_state = "frame"
	desc = "A remote control for a door."
	req_access = list(access_brig)
	anchored = 1.0    		// can't pick it up
	density = 0       		// can walk through it.
	var/id = null     		// id of door it controls.
	var/releasetime = 0		// when world.timeofday reaches it - release the prisoner
	var/timing = 0    		// boolean, true/1 timer is on, false/0 means it's not timing
	var/timetoset = 0		// Used to set releasetime upon starting the timer
	var/picture_state		// icon_state of alert picture, if not displaying text/numbers

	var/detaineename = ""
	var/issuingofficer = ""
	var/detaineecrimes = ""
	var/obj/item/device/radio/Radio
	var/datum/data/record/prisoner
	maptext_height = 26
	maptext_width = 32

	var/obj/item/weapon/paper/P
	var/datum/spacelaw/selecteddatum
	var/screen = 1
	var/suggestedbrigtime = 0
	var/alreadyrunning = FALSE
	var/list/obj/machinery/targets = list()
	var/list/committedcrimes = list()

/obj/machinery/door_timer/proc/print_report(mob/user) //Printing Cell Logs
	for(var/obj/machinery/computer/prisoner/C in prisoncomputer_list)
		P = new /obj/item/weapon/paper(C.loc)
		P.name = "[id] log - [detaineename] [worldtime2text()]"
		P.info =  "<center>[station_name()] - Security Department</center>"
		P.info += {"<center><b><h3>[id] - Brig record</h3></b></center>
					<center><b>Admission data:</b></small></center><br>
					<small><b>Log generated at:</b>		[worldtime2text()]<br>
					<b>Detainee:</b>		[detaineename]<br>
					<b>Duration:</b>		[timetoset/10] seconds<br>
					<b>Charge(s):</b>		[detaineecrimes]<br>
					<b>Arresting Officer:</b>		[user.name]<br></small>
					<br>This log file was generated automatically upon activation of a cell timer.<br><hr>"}
		playsound(C.loc, "sound/goonstation/machines/printer_dotmatrix.ogg", 50, 1)
	cell_logs.Add(P)
	return 1

/obj/machinery/door_timer/initialize()
	..()
	Radio = new /obj/item/device/radio(src)
	Radio.listening = 0
	Radio.config(list("Security" = 0))
	Radio.follow_target = src

	pixel_x = ((dir & 3)? (0) : (dir == 4 ? 32 : -32))
	pixel_y = ((dir & 3)? (dir ==1 ? 32 : -32) : (0))

	spawn(20)
		for(var/obj/machinery/door/window/brigdoor/M in airlocks)
			if(M.id == id)
				targets += M

		for(var/obj/machinery/flasher/F in machines)
			if(F.id == id)
				targets += F

		for(var/obj/structure/closet/secure_closet/brig/C in world)
			if(C.id == id)
				targets += C

		for(var/obj/machinery/treadmill_monitor/T in machines)
			if(T.id == id)
				targets += T

		if(targets.len==0)
			stat |= BROKEN
		update_icon()

/obj/machinery/door_timer/Destroy()
	QDEL_NULL(Radio)
	prisoner = null
	targets.Cut()
	return ..()

/obj/machinery/door_timer/proc/update_record(mob/user)
	var/datum/data/record/R = find_security_record("name", detaineename)
	Radio.autosay("Detainee [detaineename] has been incarcerated for [timetoset/10] seconds for the charges of; '[detaineecrimes]'\
	Arresting Officer: [user.name].[R ? "" : " Detainee record not found, manual record update required."]", name, "Security", list(z))

	if(R)
		prisoner = R
		R.fields["criminal"] = "Incarcerated"
		var/mob/living/carbon/human/M = user
		var/rank = "UNKNOWN RANK"
		if(istype(M) && M.wear_id)
			var/obj/item/weapon/card/id/I = M.wear_id
			rank = I.assignment
		R.fields["comments"] = list()
		R.fields["comments"] += "Autogenerated by [name] on [current_date_string] [worldtime2text()]<BR>Sentenced to [timetoset/10] seconds for the charges of \"[detaineecrimes]\" by [rank] [user.name]."
		update_all_mob_security_hud()

	return TRUE

/obj/machinery/door_timer/proc/clearstringandtime()
	detaineecrimes = ""
	suggestedbrigtime = 0
	timetoset = 0
	for(var/datum/spacelaw/C in committedcrimes)
		detaineecrimes += "#[C.name]	"
		suggestedbrigtime += C.max_brig
		timeset(suggestedbrigtime * 60)

/obj/machinery/door_timer/proc/add_charge(mob/user)

	if(detaineename == "")
		add_name(user)

	selecteddatum = new /datum/spacelaw
	selecteddatum.name = input(user, "Please select charge to add for [detaineename]") as null|text

	if(selecteddatum.name)
		selecteddatum.max_brig = input(user, "Please select an amount to add to the incarceration duration of [detaineename]. The current duration is [suggestedbrigtime].") as num

	if(!selecteddatum.name)
		return
	else
		committedcrimes.Add(selecteddatum)
		clearstringandtime()
		return TRUE

/obj/machinery/door_timer/proc/remove_charge(mob/user)
	if(committedcrimes.len)
		var/datum/spacelaw/removecrime = input(user, "Please select charge to remove for [detaineename]") as null|anything in committedcrimes
		if(isnull(removecrime))
			return
		else
			committedcrimes -= removecrime
			clearstringandtime()
	else
		to_chat(user,"<span class='warning'>No charges to remove!</span>")

/obj/machinery/door_timer/proc/add_name(mob/user)
	var/selectedname = input(user, "What is the detainee's name?") as null|text
	if(selectedname == "")
		to_chat(user,"<span class='warning'>Please input a valid name! </span>")
		return 0
	else
		detaineename = selectedname

/obj/machinery/door_timer/process()
	if(stat & (NOPOWER|BROKEN))
		return
	if(timing)
		if(timeleft() <= 0)
			Radio.autosay("Timer has expired. Releasing prisoner.", name, "Security", list(z))
			timer_end() // open doors, reset timer, clear status screen
			timing = 0
			. = PROCESS_KILL
		updateUsrDialog()
		update_icon()
	else
		timer_end()
		return PROCESS_KILL

// has the door power situation changed, if so update icon.
/obj/machinery/door_timer/power_change()
	..()
	update_icon()

// open/closedoor checks if door_timer has power, if so it checks if the
// linked door is open/closed (by density) then opens it/closes it.

// Closes and locks doors, power check
/obj/machinery/door_timer/proc/timer_start()
	playsound(src, 'sound/machines/chime.ogg', 50, 1)
	screen = 0

	if(stat & (NOPOWER|BROKEN))
		return 0
	// Set releasetime
	releasetime = world.timeofday + timetoset
	issuingofficer = "[usr.name]"

	if(!alreadyrunning)
		print_report(usr)
		update_record(usr)

	if(!(src in machine_processing))
		machine_processing += src

	for(var/obj/machinery/door/window/brigdoor/door in targets)
		if(door.density)
			continue
		spawn(0)
			door.close()

	for(var/obj/structure/closet/secure_closet/brig/C in targets)
		if(C.broken)
			continue
		if(C.opened && !C.close())
			continue
		C.locked = 1
		C.icon_state = C.icon_locked

	for(var/obj/machinery/treadmill_monitor/T in targets)
		T.total_joules = 0
		T.on = 1
	return 1


// Opens and unlocks doors, power check
/obj/machinery/door_timer/proc/timer_end()
	if(stat & (NOPOWER|BROKEN))
		return 0

	committedcrimes.Cut()
	detaineecrimes = ""
	detaineename = ""
	suggestedbrigtime = 0

	if(prisoner)
		prisoner.fields["criminal"] = "Released"
		update_all_mob_security_hud()
		prisoner = null

	for(var/obj/machinery/door/window/brigdoor/door in targets)
		if(!door.density)
			continue
		spawn(0)
			door.open()

	for(var/obj/structure/closet/secure_closet/brig/C in targets)
		if(C.broken)
			continue
		if(C.opened)
			continue
		C.locked = 0
		C.icon_state = C.icon_closed

	for(var/obj/machinery/treadmill_monitor/T in targets)
		if(!T.stat)
			T.redeem()
		T.on = 0

	releasetime = 0
	screen = 1
	alreadyrunning = FALSE
	return 1

// Check for releasetime timeleft
/obj/machinery/door_timer/proc/timeleft(timetoadd)
	var/time = releasetime - world.timeofday + timetoadd
	if(time > MIDNIGHT_ROLLOVER / 2)
		time -= MIDNIGHT_ROLLOVER
	if(time < 0)
		return 0
	return time / 10

// Set timetoset
/obj/machinery/door_timer/proc/timeset(seconds)
	timetoset = seconds * 10
	if(timetoset <= 0)
		timetoset = 0
	return

//Allows AIs to use door_timer, see human attack_hand function below
/obj/machinery/door_timer/attack_ai(mob/user)
	interact(user)

/obj/machinery/door_timer/attack_ghost(mob/user)
	interact(user)

/obj/machinery/door_timer/attack_hand(mob/user)
	if(..())
		return
	interact(user)

/obj/machinery/door_timer/interact(mob/user)
	//Used for the 'time left' display
	var/second = round(timeleft() % 60)
	var/minute = round((timeleft() - second) / 60)
	//Used for 'set timer'
	var/setsecond = round((timetoset / 10) % 60)
	var/setminute = round(((timetoset / 10) - setsecond) / 60)
	user.set_machine(src)

	var/dat = {"<center><h2>Timer System:<br>
		<b>Door [id]</b></h2></center><hr>"}

	if(screen)//Main Menu
		dat += {"<br><b>Detainee Name:	</b><i>[detaineename]</i>			<a href='?src=[UID()];pickname=1'>Set Name</a>
				<br><b>Charged with:	</b><br><i>[detaineecrimes]</i><br>
				<b>Suggested Brig Time:	</b><i>[suggestedbrigtime] minute(s)<i><br>
				<b>Issuing Officer:	</b><i>[user.name]</i>"}

		dat += {"<h2><b>Menu:</b></h2>
				<a href='?src=[UID()];pickcharges=1'>Add charge</a><br>
				<a href='?src=[UID()];removecharges=1'>Remove charge</a><br>
				<h2><a href='?src=[UID()];timingstart=1'>Activate Timer and close door</a></h2>"}

		dat += "Set Timer: [(setminute ? text("[setminute]:") : null)][setsecond]  <a href='?src=[UID()];change=1'>Set</a><br/>"
		dat += "<a href='?src=[UID()];tp=-60'>-</a> <a href='?src=[UID()];tp=-1'>-</a> <a href='?src=[UID()];tp=1'>+</a> <A href='?src=[UID()];tp=60'>+</a><br>"

	if(!screen) //Prisoner Menu
		dat += "<center><h1>Time Left: [(minute ? text("[minute]:") : null)][second]</h1></center>"
		dat += {"<center><b><h2>Current Detainee Information</h2></b><hr></center><br><b>Detainee Name:	</b>[detaineename]<br><b>Charged with:	</b><br>[detaineecrimes]
				<br><b>Duration brigged:	</b>[timetoset/10] seconds<br><b>Brigging Officer:</b>	[issuingofficer]"}

		dat += "<hr><h2><br><a href='?src=[UID()];timingstop=1'>Stop Timer and open door</a></h2>"
		dat += "Set Timer: [(setminute ? text("[setminute]:") : null)][setsecond]  <a href='?src=[UID()];change=1'>Set Time</a><br/>"

	//Mounted Flash Controls
	for(var/obj/machinery/flasher/F in targets)
		if(F.last_flash && (F.last_flash + 150) > world.time)
			dat += "<br><A href='?src=[UID()];flash=1'>Flash Charging</A>"
		else
			dat += "<br><A href='?src=[UID()];flash=1'>Activate Flash</A>"

	//Locker Controls
	for(var/obj/structure/closet/secure_closet/brig/C in targets)
		if(C.opened)
			dat += "<br><A href='?src=[UID()];closet=1'>Close Locker</A>"
		else
			dat += "<br><A href='?src=[UID()];closet=1'>Open Locker</A>"

	var/datum/browser/popup = new(user, "door_timer", name, 400, 500)
	popup.set_content(dat)
	popup.open()

//Function for using door_timer dialog input, checks if user has permission
// href_list to
//  "timing" turns on timer
//  "tp" value to modify timer
//  "fc" activates flasher
// 	"change" resets the timer to the timetoset amount while the timer is counting down
// Also updates dialog window and timer icon
/obj/machinery/door_timer/Topic(href, href_list)
	..()

	if(!allowed(usr) && !usr.can_admin_interact())
		return 1

	usr.set_machine(src)

	if(href_list["timingstart"])
		if(!detaineecrimes | isnull(detaineename) | timetoset == 0)
			visible_message("<span class='warning'>[src] buzzes. Cannot activate without all required information.</span>")
			playsound(loc, 'sound/machines/buzz-sigh.ogg', 50, 0)
		else
			timer_start()
			alreadyrunning = TRUE
			timing = 1

	if(href_list["timingstop"])
		switch(alert("Are you sure you wish to stop the cell timer? All data will be cleared", "Stop Cell Timer?", "Stop", "Abort"))
			if("Stop")
				Radio.autosay("Timer stopped manually by [usr.name].", name, "Security", list(z))
				timer_end()
				timing = 0
			if("Abort")
				return

	if(href_list["tp"])  //adjust timer, close door if not already closed
		var/tp = text2num(href_list["tp"])
		var/addtime = (timetoset / 10)
		addtime += tp
		addtime = min(max(round(addtime), 0), 3600)
		if(!timing)
			timeset(addtime)
		else
			releasetime = (world.timeofday + timeset(addtime) * 10)

	if(href_list["change"])
		var/newtime = input(usr, "How many minutes would you like to set the timer to?") as num
		timeset(newtime * 60)
		if(timing)
			timer_start()

	if(href_list["flash"]) //Flash Button
		for(var/obj/machinery/flasher/F in targets)
			F.flash()

	if(href_list["closet"]) //Closet Button
		for(var/obj/structure/closet/secure_closet/brig/C in targets)
			if(C.broken)
				return
			if(C.opened)
				C.close()
				C.icon_state = C.icon_locked
				C.locked = 1
			else
				C.locked = 0
				C.open()

	if(href_list["pickname"])
		add_name(usr)

	if(href_list["pickcharges"])
		add_charge(usr)

	if(href_list["removecharges"])
		remove_charge(usr)

	add_fingerprint(usr)
	updateUsrDialog()
	update_icon()


//icon update function
// if NOPOWER, display blank
// if BROKEN, display blue screen of death icon AI uses
// if timing=true, run update display function
/obj/machinery/door_timer/update_icon()
	if(stat & (NOPOWER))
		icon_state = "frame"
		return
	if(stat & (BROKEN))
		set_picture("ai_bsod")
		return
	if(timing)
		var/disp1 = id
		var/timeleft = timeleft()
		var/disp2 = "[add_zero(num2text((timeleft / 60) % 60),2)]~[add_zero(num2text(timeleft % 60), 2)]"
		if(length(disp2) > CHARS_PER_LINE)
			disp2 = "Error"
		update_display(disp1, disp2)
	else
		if(maptext)	maptext = ""


// Adds an icon in case the screen is broken/off, stolen from status_display.dm
/obj/machinery/door_timer/proc/set_picture(state)
	picture_state = state
	overlays.Cut()
	overlays += image('icons/obj/status_display.dmi', icon_state=picture_state)


//Checks to see if there's 1 line or 2, adds text-icons-numbers/letters over display
// Stolen from status_display
/obj/machinery/door_timer/proc/update_display(line1, line2)
	var/new_text = {"<div style="font-size:[FONT_SIZE];color:[FONT_COLOR];font:'[FONT_STYLE]';text-align:center;" valign="top">[line1]<br>[line2]</div>"}
	if(maptext != new_text)
		maptext = new_text


//Actual string input to icon display for loop, with 5 pixel x offsets for each letter.
//Stolen from status_display
/obj/machinery/door_timer/proc/texticon(tn, px = 0, py = 0)
	var/image/I = image('icons/obj/status_display.dmi', "blank")
	var/len = lentext(tn)

	for(var/d = 1 to len)
		var/char = copytext(tn, len-d+1, len-d+2)
		if(char == " ")
			continue
		var/image/ID = image('icons/obj/status_display.dmi', icon_state=char)
		ID.pixel_x = -(d-1)*5 + px
		ID.pixel_y = py
		I.overlays += ID
	return I


/obj/machinery/door_timer/cell_1
	name = "Cell 1"
	id = "Cell 1"
	dir = 2
	pixel_y = -32


/obj/machinery/door_timer/cell_2
	name = "Cell 2"
	id = "Cell 2"
	dir = 2
	pixel_y = -32


/obj/machinery/door_timer/cell_3
	name = "Cell 3"
	id = "Cell 3"
	dir = 2
	pixel_y = -32


/obj/machinery/door_timer/cell_4
	name = "Cell 4"
	id = "Cell 4"
	dir = 2
	pixel_y = -32


/obj/machinery/door_timer/cell_5
	name = "Cell 5"
	id = "Cell 5"
	dir = 2
	pixel_y = -32


/obj/machinery/door_timer/cell_6
	name = "Cell 6"
	id = "Cell 6"
	dir = 4
	pixel_x = 32

#undef FONT_SIZE
#undef FONT_COLOR
#undef FONT_STYLE
#undef CHARS_PER_LINE
