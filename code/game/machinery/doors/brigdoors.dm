#define CHARS_PER_LINE 5
#define FONT_SIZE "5pt"
#define FONT_COLOR "#09f"
#define FONT_STYLE "Small Fonts"

///////////////////////////////////////////////////////////////////////////////////////////////
// Brig Door control displays.
//  Description: This is a controls the timer for the brig doors, displays the timer on itself and
//               has a popup window when used, allowing to set the timer.
//  Code Notes: Combination of old brigdoor.dm code from rev4407 and the status_display.dm code
//  Date: 01/September/2010
//  Programmer: Veryinky
/////////////////////////////////////////////////////////////////////////////////////////////////
/obj/machinery/door_timer
	name = "door timer"
	icon = 'icons/obj/status_display.dmi'
	icon_state = "frame"
	desc = "A remote control for a door."
	req_access = list(ACCESS_BRIG)
	anchored = 1    		// can't pick it up
	density = 0       		// can walk through it.
	var/id = null     		// id of door it controls.
	var/releasetime = 0		// when world.timeofday reaches it - release the prisoner
	var/timing = 0    		// boolean, true/1 timer is on, false/0 means it's not timing
	var/picture_state		// icon_state of alert picture, if not displaying text/numbers
	var/list/obj/machinery/targets = list()
	var/timetoset = 0		// Used to set releasetime upon starting the timer
	var/obj/item/radio/Radio
	var/printed = 0
	var/datum/data/record/prisoner
	maptext_height = 26
	maptext_width = 32
	maptext_y = -1
	var/occupant = "None"
	var/crimes = "None"
	var/time = 0
	var/officer = "None"

/obj/machinery/door_timer/New()
 	GLOB.celltimers_list += src
 	return ..()

/obj/machinery/door_timer/Destroy()
 	GLOB.celltimers_list -= src
 	return ..()

/obj/machinery/door_timer/proc/print_report()
	var/logname = input(usr, "Name of the guilty?","[id] log name")
	var/logcharges = stripped_multiline_input(usr, "What have they been charged with?","[id] log charges")

	if(!logname || !logcharges)
		return 0
	occupant = logname
	crimes = logcharges
	time = timetoset
	officer = usr.name

	for(var/obj/machinery/computer/prisoner/C in GLOB.prisoncomputer_list)
		var/obj/item/paper/P = new /obj/item/paper(C.loc)
		P.name = "[id] log - [logname] [station_time_timestamp()]"
		P.info =  "<center><b>[id] - Brig record</b></center><br><hr><br>"
		P.info += {"<center>[station_name()] - Security Department</center><br>
						<center><small><b>Admission data:</b></small></center><br>
						<small><b>Log generated at:</b>		[station_time_timestamp()]<br>
						<b>Detainee:</b>		[logname]<br>
						<b>Duration:</b>		[seconds_to_time(timetoset / 10)]<br>
						<b>Charge(s):</b>	[logcharges]<br>
						<b>Arresting Officer:</b>		[usr.name]<br><hr><br>
						<small>This log file was generated automatically upon activation of a cell timer.</small>"}

		playsound(C.loc, "sound/goonstation/machines/printer_dotmatrix.ogg", 50, 1)
		GLOB.cell_logs += P

	var/datum/data/record/G = find_record("name", logname, data_core.general)
	var/prisoner_drank = "unknown"
	var/prisoner_trank = "unknown"
	if(G)
		if(G.fields["rank"])
			prisoner_drank = G.fields["rank"]
		if(G.fields["real_rank"]) // Ignore alt job titles - necessary for lookups
			prisoner_trank = G.fields["real_rank"]

	var/datum/data/record/R = find_security_record("name", logname)

	var/announcetext = "Detainee [logname] ([prisoner_drank]) has been incarcerated for [seconds_to_time(timetoset / 10)] for the charges of, '[logcharges]'. \
	Arresting Officer: [usr.name].[R ? "" : " Detainee record not found, manual record update required."]"
	Radio.autosay(announcetext, name, "Security", list(z))

	if(prisoner_trank != "unknown")
		notify_dept_head(prisoner_trank, announcetext)

	if(R)
		prisoner = R
		R.fields["criminal"] = "Incarcerated"
		var/mob/living/carbon/human/M = usr
		var/rank = "UNKNOWN RANK"
		if(istype(M) && M.wear_id)
			var/obj/item/card/id/I = M.wear_id
			rank = I.assignment
		if(!R.fields["comments"] || !islist(R.fields["comments"])) //copied from security computer code because apparently these need to be initialized
			R.fields["comments"] = list()
		R.fields["comments"] += "Autogenerated by [name] on [current_date_string] [station_time_timestamp()]<BR>Sentenced to [timetoset/10] seconds for the charges of \"[logcharges]\" by [rank] [usr.name]."
		update_all_mob_security_hud()
	return 1


/obj/machinery/door_timer/proc/notify_dept_head(jobtitle, antext)
	if(!jobtitle || !antext)
		return
	if(jobtitle == "Civilian")
		// Don't notify the HoP about greytiding civilians
		return
	var/datum/job/brigged_job = SSjobs.GetJob(jobtitle)
	if(!brigged_job)
		return
	if(!brigged_job.department_head[1])
		return
	var/boss_title = brigged_job.department_head[1]

	var/obj/item/pda/target_pda
	for(var/obj/item/pda/check_pda in PDAs)
		if(check_pda.ownrank == boss_title)
			target_pda = check_pda
	if(!target_pda)
		return
	var/datum/data/pda/app/messenger/PM = target_pda.find_program(/datum/data/pda/app/messenger)
	if(PM && PM.can_receive())
		PM.notify("<b>Message from Brig Timer (Automated), </b>\"[antext]\" (Unable to Reply)")


/obj/machinery/door_timer/Initialize()
	..()

	Radio = new /obj/item/radio(src)
	Radio.listening = 0
	Radio.config(list("Security" = 0))
	Radio.follow_target = src

	pixel_x = ((dir & 3)? (0) : (dir == 4 ? 32 : -32))
	pixel_y = ((dir & 3)? (dir ==1 ? 32 : -32) : (0))

	spawn(20)
		for(var/obj/machinery/door/window/brigdoor/M in GLOB.airlocks)
			if(M.id == id)
				targets += M

		for(var/obj/machinery/flasher/F in GLOB.machines)
			if(F.id == id)
				targets += F

		for(var/obj/structure/closet/secure_closet/brig/C in world)
			if(C.id == id)
				targets += C

		for(var/obj/machinery/treadmill_monitor/T in GLOB.machines)
			if(T.id == id)
				targets += T

		if(targets.len==0)
			stat |= BROKEN
		update_icon()

/obj/machinery/door_timer/Destroy()
	QDEL_NULL(Radio)
	targets.Cut()
	prisoner = null
	return ..()

//Main door timer loop, if it's timing and time is >0 reduce time by 1.
// if it's less than 0, open door, reset timer
// update the door_timer window and the icon
/obj/machinery/door_timer/process()
	if(stat & (NOPOWER|BROKEN))
		return
	if(timing)
		if(timeleft() <= 0)
			Radio.autosay("Timer has expired. Releasing prisoner.", name, "Security", list(z))
			occupant = "None"
			timer_end() // open doors, reset timer, clear status screen
			timing = 0
			. = PROCESS_KILL

		updateUsrDialog()
		update_icon()
	else
		timer_end()
		return PROCESS_KILL

// has the door power situation changed, if so update icon.
/obj/machinery/door_timer/power_change()
	..()
	update_icon()


// open/closedoor checks if door_timer has power, if so it checks if the
// linked door is open/closed (by density) then opens it/closes it.

// Closes and locks doors, power check
/obj/machinery/door_timer/proc/timer_start()

	if(stat & (NOPOWER|BROKEN))
		return 0

	if(!printed)
		if(!print_report())
			timing = 0
			return 0

	// Set releasetime
	releasetime = world.timeofday + timetoset
	START_PROCESSING(SSmachines, src)

	for(var/obj/machinery/door/window/brigdoor/door in targets)
		if(door.density)
			continue
		spawn(0)
			door.close()

	for(var/obj/structure/closet/secure_closet/brig/C in targets)
		if(C.broken)
			continue
		if(C.opened && !C.close())
			continue
		C.locked = 1
		C.icon_state = C.icon_locked

	for(var/obj/machinery/treadmill_monitor/T in targets)
		T.total_joules = 0
		T.on = 1

	return 1


// Opens and unlocks doors, power check
/obj/machinery/door_timer/proc/timer_end()
	if(stat & (NOPOWER|BROKEN))
		return 0

	// Reset vars
	occupant = "None"
	crimes = "None"
	time = 0
	officer = "None"
	releasetime = 0
	printed = 0
	if(prisoner)
		prisoner.fields["criminal"] = "Released"
		update_all_mob_security_hud()
		prisoner = null

	for(var/obj/machinery/door/window/brigdoor/door in targets)
		if(!door.density)
			continue
		spawn(0)
			door.open()

	for(var/obj/structure/closet/secure_closet/brig/C in targets)
		if(C.broken)
			continue
		if(C.opened)
			continue
		C.locked = 0
		C.icon_state = C.icon_closed

	for(var/obj/machinery/treadmill_monitor/T in targets)
		if(!T.stat)
			T.redeem()
		T.on = 0

	return 1


// Check for releasetime timeleft
/obj/machinery/door_timer/proc/timeleft()
	var/time = releasetime - world.timeofday
	if(time > MIDNIGHT_ROLLOVER / 2)
		time -= MIDNIGHT_ROLLOVER
	if(time < 0)
		return 0
	return time / 10

// Set timetoset
/obj/machinery/door_timer/proc/timeset(seconds)
	timetoset = seconds * 10

	if(timetoset <= 0)
		timetoset = 0

	return

//Allows AIs to use door_timer, see human attack_hand function below
/obj/machinery/door_timer/attack_ai(mob/user)
	interact(user)

/obj/machinery/door_timer/attack_ghost(mob/user)
	interact(user)

//Allows humans to use door_timer
//Opens dialog window when someone clicks on door timer
// Allows altering timer and the timing boolean.
// Flasher activation limited to 150 seconds
/obj/machinery/door_timer/attack_hand(mob/user)
	if(..())
		return
	interact(user)

/obj/machinery/door_timer/interact(mob/user)
	// Used for the 'time left' display
	var/second = round(timeleft() % 60)
	var/minute = round((timeleft() - second) / 60)

	// Used for 'set timer'
	var/setsecond = round((timetoset / 10) % 60)
	var/setminute = round(((timetoset / 10) - setsecond) / 60)

	user.set_machine(src)

	// dat
	var/dat = "<HR>Timer System:</hr>"
	dat += " <b>Door [id] controls</b><br/>"

	// Start/Stop timer
	if(timing)
		dat += "<a href='?src=[UID()];timing=0'>Stop Timer and open door</a><br/>"
	else
		dat += "<a href='?src=[UID()];timing=1'>Activate Timer and close door</a><br/>"

	// Time Left display (uses releasetime)
	dat += "Time Left: [(minute ? text("[minute]:") : null)][second] <br/>"
	dat += "<br/>"

	// Set Timer display (uses timetoset)
	if(timing)
		dat += "Set Timer: [(setminute ? text("[setminute]:") : null)][setsecond]  <a href='?src=[UID()];change=1'>Set</a><br/>"
	else
		dat += "Set Timer: [(setminute ? text("[setminute]:") : null)][setsecond]<br/>"

	// Controls
	dat += "<a href='?src=[UID()];settime=1'>Input Time</a>"

	// Mounted flash controls
	for(var/obj/machinery/flasher/F in targets)
		if(F.last_flash && (F.last_flash + 150) > world.time)
			dat += "<br/><A href='?src=[UID()];fc=1'>Flash Charging</A>"
		else
			dat += "<br/><A href='?src=[UID()];fc=1'>Activate Flash</A>"

	dat += "<br/><br/><a href='?src=[user.UID()];mach_close=computer'>Close</a>"

	var/datum/browser/popup = new(user, "door_timer", name, 400, 500)
	popup.set_content(dat)
	popup.open()


//Function for using door_timer dialog input, checks if user has permission
// href_list to
//  "timing" turns on timer
//  "tp" value to modify timer
//  "fc" activates flasher
// 	"change" resets the timer to the timetoset amount while the timer is counting down
// Also updates dialog window and timer icon
/obj/machinery/door_timer/Topic(href, href_list)
	if(..())
		return 1

	if(!allowed(usr) && !usr.can_admin_interact())
		return 1

	usr.set_machine(src)

	if(href_list["timing"])
		timing = text2num(href_list["timing"])

		if(timing)
			timer_start()
		else
			timer_end()
			if(!isobserver(usr)) //spooky admin ghosts are in your brig, releasing your prisoners
				Radio.autosay("Timer stopped manually by [usr.name].", name, "Security", list(z))

	else
		if(href_list["settime"])
			var/time = min(max(round(return_time_input(usr)), 0), 3600)
			timeset(time)

		if(href_list["fc"])
			for(var/obj/machinery/flasher/F in targets)
				F.flash()

		if(href_list["change"])
			printed = 1
			timer_start()

	add_fingerprint(usr)
	updateUsrDialog()
	update_icon()


//icon update function
// if NOPOWER, display blank
// if BROKEN, display blue screen of death icon AI uses
// if timing=true, run update display function
/obj/machinery/door_timer/update_icon()
	if(stat & (NOPOWER))
		icon_state = "frame"
		return
	if(stat & (BROKEN))
		set_picture("ai_bsod")
		return
	if(timing)
		var/disp1 = id
		var/timeleft = timeleft()
		var/disp2 = "[add_zero(num2text((timeleft / 60) % 60),2)]:[add_zero(num2text(timeleft % 60), 2)]"
		if(length(disp2) > CHARS_PER_LINE)
			disp2 = "Error"
		update_display(disp1, disp2)
	else
		if(maptext)	maptext = ""


// Adds an icon in case the screen is broken/off, stolen from status_display.dm
/obj/machinery/door_timer/proc/set_picture(state)
	picture_state = state
	overlays.Cut()
	overlays += image('icons/obj/status_display.dmi', icon_state=picture_state)

/obj/machinery/door_timer/proc/return_time_input()
	var/mins = input(usr, "Minutes", "Enter number of minutes", 0) as num
	var/seconds = input(usr, "Seconds", "Enter number of seconds", 0) as num
	var/totaltime = (seconds + (mins * 60))
	return totaltime

//Checks to see if there's 1 line or 2, adds text-icons-numbers/letters over display
// Stolen from status_display
/obj/machinery/door_timer/proc/update_display(line1, line2)
	line1 = uppertext(line1)
	line2 = uppertext(line2)
	var/new_text = {"<div style="font-size:[FONT_SIZE];color:[FONT_COLOR];font:'[FONT_STYLE]';text-align:center;" valign="top">[line1]<br>[line2]</div>"}
	if(maptext != new_text)
		maptext = new_text


//Actual string input to icon display for loop, with 5 pixel x offsets for each letter.
//Stolen from status_display
/obj/machinery/door_timer/proc/texticon(tn, px = 0, py = 0)
	var/image/I = image('icons/obj/status_display.dmi', "blank")
	var/len = length(tn)

	for(var/d = 1 to len)
		var/char = copytext(tn, len-d+1, len-d+2)
		if(char == " ")
			continue
		var/image/ID = image('icons/obj/status_display.dmi', icon_state=char)
		ID.pixel_x = -(d-1)*5 + px
		ID.pixel_y = py
		I.overlays += ID
	return I


/obj/machinery/door_timer/cell_1
	name = "Cell 1"
	id = "Cell 1"
	dir = 2
	pixel_y = -32


/obj/machinery/door_timer/cell_2
	name = "Cell 2"
	id = "Cell 2"
	dir = 2
	pixel_y = -32


/obj/machinery/door_timer/cell_3
	name = "Cell 3"
	id = "Cell 3"
	dir = 2
	pixel_y = -32


/obj/machinery/door_timer/cell_4
	name = "Cell 4"
	id = "Cell 4"
	dir = 2
	pixel_y = -32


/obj/machinery/door_timer/cell_5
	name = "Cell 5"
	id = "Cell 5"
	dir = 2
	pixel_y = -32


/obj/machinery/door_timer/cell_6
	name = "Cell 6"
	id = "Cell 6"
	dir = 4
	pixel_x = 32

#undef FONT_SIZE
#undef FONT_COLOR
#undef FONT_STYLE
#undef CHARS_PER_LINE
