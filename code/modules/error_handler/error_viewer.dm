// Error viewing datums, responsible for storing error info, notifying admins
// when errors occur, and showing them to admins on demand.

// There are 3 different types used here:
//
// - ErrorCache keeps track of all error sources, as well as all individually
//   logged errors. Only one instance of this datum should ever exist, and it's
//   right here:

#ifdef DEBUG
var/global/datum/ErrorViewer/ErrorCache/error_cache = new()
#else
// If debugging is disabled, there's nothing useful to log, so don't bother.
var/global/datum/ErrorViewer/ErrorCache/error_cache = null
#endif

// - ErrorSource datums exist for each line (of code) that generates an error, 
//   and keep track of all errors generated by that line.
//
// - ErrorEntry datums exist for each logged error, and keep track of all
//   relevant info about that error.

// Common vars and procs are kept at the ErrorViewer level
/datum/ErrorViewer/
	var/name = ""

/datum/ErrorViewer/proc/browseTo(var/user, var/html)
	if(user)
		user << browse(html, "window=error_viewer;size=600x400")

/datum/ErrorViewer/proc/buildHeader(var/datum/ErrorViewer/back_to, var/linear)
	// Common starter HTML for showTo
	. = {"<html><head><title>Runtime Viewer</title>
	<style>body{font-family:'Courier New',monospace;font-size:8pt;}</style>
	</head><body>"}

	if(istype(back_to))
		. += "[back_to.makeLink("<<<", null, linear)]<br><br>"
	return .

/datum/ErrorViewer/proc/showTo(var/user, var/datum/ErrorViewer/back_to, var/linear)
	// Specific to each child type
	return

/datum/ErrorViewer/proc/makeLink(var/linktext, var/datum/ErrorViewer/back_to, var/linear)
	var/back_to_param = ""
	if(!linktext)
		linktext = name
	if(istype(back_to))
		back_to_param = ";viewruntime_backto=\ref[back_to]"
	if(linear)
		back_to_param += ";viewruntime_linear=1"
	return "<A HREF='?_src_=holder;viewruntime=\ref[src][back_to_param]'>[linktext]</A>"

/datum/ErrorViewer/ErrorCache
	var/list/errors = list()
	var/list/error_sources = list()
	var/list/errors_silenced = list()

/datum/ErrorViewer/ErrorCache/showTo(var/user, var/datum/ErrorViewer/back_to, var/linear)
	var/html = buildHeader()
	html += "[total_runtimes] runtimes, [total_runtimes_skipped] skipped<br><br>"
	if(!linear)
		html += "organized | [makeLink("linear", null, 1)]<br><br>"
		var/datum/ErrorViewer/ErrorSource/error_source
		for(var/erroruid in error_sources)
			error_source = error_sources[erroruid]
			html += "[error_source.makeLink(null, src)]<br>"
	else
		html += "[makeLink("organized", null)] | linear<br><br>"
		for(var/datum/ErrorViewer/ErrorEntry/error_entry in errors)
			html += "[error_entry.makeLink(null, src, 1)]<br>"
	browseTo(user, html)

/datum/ErrorViewer/ErrorCache/proc/logError(var/exception/e, var/list/desclines)
	if(!istype(e))
		return // Abnormal exception, don't even bother

	var/erroruid = "[e.file][e.line]"
	var/datum/ErrorViewer/ErrorSource/error_source = error_sources[erroruid]
	if(!error_source)
		error_source = new(e)
		error_sources[erroruid] = error_source

	var/datum/ErrorViewer/ErrorEntry/error_entry = new(e, desclines)
	error_entry.error_source = error_source
	errors += error_entry
	error_source.errors += error_entry

	// Show the error to admins with debug messages turned on, but only if one
	//  from the same source hasn't been shown too recently
	if(error_source.next_message_at <= world.time)
		var/const/viewtext = "\[view]" // Nesting these in other brackets went poorly
		log_debug("Runtime in [e.file],[e.line]: [e] [error_entry.makeLink(viewtext)]")
		error_source.next_message_at = world.time + ERROR_MSG_DELAY

/datum/ErrorViewer/ErrorSource
	var/list/errors = list()
	var/next_message_at = 0

/datum/ErrorViewer/ErrorSource/New(var/exception/e)
	if(!istype(e))
		name = "\[[time_stamp()]] Uncaught exceptions"
		return
	name = "\[[time_stamp()]] Runtime in [e.file],[e.line]: [e]"

/datum/ErrorViewer/ErrorSource/showTo(var/user, var/datum/ErrorViewer/back_to, var/linear)
	if(!istype(back_to))
		back_to = error_cache
	var/html = buildHeader(back_to)
	for(var/datum/ErrorViewer/ErrorEntry/error_entry in errors)
		html += "[error_entry.makeLink(null, src)]<br>"
	browseTo(user, html)

/datum/ErrorViewer/ErrorEntry
	var/datum/ErrorViewer/ErrorSource/error_source
	var/exception/exc
	var/desc = ""
	var/usrRef
	var/turf/usrLoc

/datum/ErrorViewer/ErrorEntry/New(var/exception/e, var/list/desclines)
	if(!istype(e))
		name = "\[[time_stamp()]] Uncaught exception: [e]"
		return
	name = "\[[time_stamp()]] Runtime in [e.file],[e.line]: [e]"
	exc = e
	if(istype(desclines))
		for(var/line in desclines)
			// There's probably a better way to do this than non-breaking spaces...
			desc += "&nbsp;&nbsp;" + line + "<br>"
	if(usr)
		usrRef = "\ref[usr]"
		usrLoc = get_turf(usr)

/datum/ErrorViewer/ErrorEntry/showTo(var/user, var/datum/ErrorViewer/back_to, var/linear)
	if(!istype(back_to))
		back_to = error_source
	var/html = buildHeader(back_to, linear)
	html += name + "<br>"
	html += desc
	if(usrRef)
		html += "<br>usr: <a href='?_src_=vars;Vars=[usrRef]'>VV</a>"
		html += " <a href='?_src_=holder;adminplayeropts=[usrRef]'>PP</a>"
		html += " <a href='?_src_=holder;adminplayerobservefollow=[usrRef]'>Follow</a>"
		if(istype(usrLoc))
			html += "<br>usr.loc: <a href='?_src_=vars;Vars=\ref[usrLoc]'>VV</a>"
			html += " <a href='?_src_=holder;adminplayerobservecoodjump=1;X=[usrLoc.x];Y=[usrLoc.y];Z=[usrLoc.z]'>JMP</a>"
	browseTo(user, html)
